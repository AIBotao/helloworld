name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: myapps # set this to your Amazon ECR repository name
  # ECS_SERVICE: MY_ECS_SERVICE # set this to your Amazon ECS service name
  # ECS_CLUSTER: MY_ECS_CLUSTER # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION:
  #   MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  #   # file, e.g. .aws/task-definition.json
  # CONTAINER_NAME: MY_CONTAINER_NAME

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: AKIA2YAN7NKOXFVWQA4N
          aws-secret-access-key: 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
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
